<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
	default-autowire="byName">

	<!-- 告诉Spring我们打算使用基于注解的自动装配 -->
	<context:annotation-config />
	<!-- 开启自动检测Bean -->
	<context:component-scan base-package="com/springinaction/springidol" />
	<!-- Bean declarations go here -->

	<bean id="duke" class="com.springinaction.springidol.performer.Juggler">
		<constructor-arg value="15" />
	</bean>

	<bean id="sonnet29" class="com.springinaction.springidol.performer.Sonnet29">
	</bean>

	<bean id="poeticDuke" class="com.springinaction.springidol.performer.PoeticJuggler">
		<constructor-arg value="15" />
		<constructor-arg ref="sonnet29" />
	</bean>

	<!-- 使用工厂方法创建单例bean -->
	<bean id="theStage" class="com.springinaction.springidol.performer.Stage"
		factory-method="getInstance" />

	<!-- 使用简化的bean属性配置 -->
	<bean id="kenny" class="com.springinaction.springidol.performer.Instrumentalist"
		p:song="Jingle bells" />

	<bean id="hank" class="com.springinaction.springidol.performer.OneManBand">
		<property name="instruments">
			<list>
				<ref bean="saxophone" />
				<ref bean="piano" />
			</list>
		</property>
	</bean>

	<!-- 使用SpEL表达式 -->
	<bean id="carl" class="com.springinaction.springidol.performer.Instrumentalist">
		<property name="song" value="#{kenny.song}" />
	</bean>

	<!-- 乐器bean -->
	<bean id="saxophone" class="com.springinaction.springidol.instrument.Saxophone" />
	<bean id="piano" class="com.springinaction.springidol.instrument.Piano" />
	<!-- 用于byName的自动装配 -->
	<bean id="instrument" class="com.springinaction.springidol.instrument.Piano" />

	<!-- 使用AOP -->
	<bean id="audience2" class="com.springinaction.springidol.aop.Audience2" />
	<bean id="magician" class="com.springinaction.springidol.performer.Magician" />
	<bean id="haozi" class="com.springinaction.springidol.performer.Volunteer" />

	<!-- 使用自动注解形式的AOP -->
	<!-- <bean id="audience" class="com.springinaction.springidol.audience.Audience" 
		/> -->

	<!-- 切点定义复杂方式 -->
	<!-- <aop:config> -->
	<!-- <aop:aspect ref="audience2"> -->
	<!-- <aop:before -->
	<!-- pointcut="execution(* com.springinaction.springidol.inter.Performer.perform(..))" -->
	<!-- method="takeSeats" /> -->
	<!-- <aop:before -->
	<!-- pointcut="execution(* com.springinaction.springidol.inter.Performer.perform(..))" -->
	<!-- method="turnOffCellPhones" /> -->
	<!-- <aop:after-returning -->
	<!-- pointcut="execution(* com.springinaction.springidol.inter.Performer.perform(..))" -->
	<!-- method="applaud" /> -->
	<!-- <aop:after-throwing -->
	<!-- pointcut="execution(* com.springinaction.springidol.inter.Performer.perform(..))" -->
	<!-- method="demandRefund" /> -->
	<!-- </aop:aspect> -->
	<!-- </aop:config> -->

	<!-- 定义命名切点 -->

	<!-- 在上下文中创建一个AnnotationAwareAspectJAutoProxyCreator类 -->
	<!-- 它会自动代理一些Bean，这些Bean的方法需要与使用@Aspect注解的Bean中所定义的切点相匹配，而这些切点又是使用@Pointcut注解定义出来的 -->
	<aop:aspectj-autoproxy />

	<!-- 坑：aop创建的代理是基于接口的，将造成Spel无法获取类属性 -->
	<!-- proxy-target-class创建基于类的动态代码 -->
	<aop:config proxy-target-class="true">
		<aop:aspect ref="audience2">
			<aop:pointcut
				expression="execution(* com.springinaction.springidol.inter.Performer.perform(..))"
				id="performance" />

			<aop:pointcut
				expression="execution(* com.springinaction.springidol.inter.Performer.perform(..))"
				id="performance2" />


			<aop:before method="takeSeats" pointcut-ref="performance" />
			<aop:before method="turnOffCellPhones" pointcut-ref="performance" />
			<aop:after-returning method="applaud"
				pointcut-ref="performance" />
			<aop:after-throwing method="demandRefund"
				pointcut-ref="performance" />

			<!-- 声明环绕通知 -->
			<aop:around method="watchPerformance" pointcut-ref="performance2" />
		</aop:aspect>


		<!-- 参数化的aop -->
		<!-- <aop:aspect ref="magician"> -->
		<!-- <aop:pointcut id="thinking" -->
		<!-- expression="execution(* com.springinaction.springidol.inter.Thinker.thinkOfSomething(String)) 
			and args(thoughts)" /> -->

		<!-- <aop:before method="interceptThoughts" arg-names="thoughts" -->
		<!-- pointcut-ref="thinking" /> -->
		<!-- </aop:aspect> -->

		<!-- 使用aop为已有的bean引入接口 -->
		<!-- <aop:aspect> -->
		<!-- <aop:declare-parents types-matching="com.springinaction.springidol.inter.Performer+" -->
		<!-- implement-interface="com.springinaction.springidol.inter.Contestant" -->
		<!-- default-impl="com.springinaction.springidol.performer.GraciousContestant" 
			/> -->
		<!-- </aop:aspect> -->
	</aop:config>
	<!-- 使用注解AspectJ为已有的bean引入接口 -->
	<!-- 类型cast报错，待查 -->
	<bean class="com.springinaction.springidol.performer.ContestantIntroducer" />
</beans>




